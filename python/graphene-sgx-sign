#!/usr/bin/env python3
# SPDX-License-Identifier: LGPL-3.0-or-later
# Copyright (c) 2021 Intel Corporation
#                    Borys Pop≈Çawski <borysp@invisiblethingslab.com>

import datetime
import click
from graphenelibos import Manifest, get_mrenclave, get_tbssigstruct, sign_with_local_key

@click.command()
@click.option('--output', '-output', required=True,
              help='Output .manifest.sgx file (manifest augmented with autogenerated fields)')
@click.option('--libpal', '-libpal', help='Input libpal file')
@click.option('--key', '-key', required=True, help='specify signing key (.pem) file')
@click.option('--manifest', '-manifest', 'manifest_path', required=True,
              help='Input .manifest file')
@click.option('--sigfile', '-sigfile', help='Output .sig file')
def main(output, libpal, key, manifest_path, sigfile):
    with open(manifest_path, 'r', encoding='UTF-8') as f:
        manifest = Manifest.load(f)

    if not manifest.has_tfs_expanded():
        manifest.expand_all_trusted_files()

    with open(output, 'w', encoding='UTF-8') as f:
        manifest.dump(f)

    if not sigfile:
        if manifest_path.endswith('.manifest'):
            sigfile = manifest_path[:-len('.manifest')]
        else:
            sigfile = manifest_path
        sigfile += '.sig'

    today = datetime.date.today()
    mrenclave = get_mrenclave(manifest, today, libpal)
    sigstruct = get_tbssigstruct(manifest, today, mrenclave)
    sigstruct.sign(sign_with_local_key, key)

    with open(sigfile, 'wb') as f:
        f.write(sigstruct.to_bytes())

if __name__ == '__main__':
    main() # pylint: disable=no-value-for-parameter
